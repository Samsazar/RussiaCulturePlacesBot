const { Scenes, Markup } = require("telegraf");
const { zeroNumber, getQuery, updateNumber, addLike, deleteLike, getLike, addUser, updateUserToP, updateUserCity, updateUserKeyword } = require("./DBconnect")
const {cultureHandler, cultureInfo} = require("./apireqs");
const { set } = require("lodash");


class SceneGenerator {
    GentypeOfCulPlaceScene () {
        const typeOfCulPlace = new Scenes.BaseScene('typeOfCulPlace')
        typeOfCulPlace.enter(async (ctx) => {
            // –∫–ª–∞–≤–∞
            
            const keyboard = Markup.keyboard([[
                Markup.button.text("–ú—É–∑–µ–π"),
                Markup.button.text("–¢–µ–∞—Ç—Ä")], [
                Markup.button.text("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞"),
                Markup.button.text("–ü–∞—Ä–∫–∏")
            ]]).resize();

            
            await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ—Å—Ç–∞', keyboard);
        })

        typeOfCulPlace.on('text', async (ctx) => {
            const currtypeOfCulPlace = ctx.message.text;
            const culPlaces = ["–ú—É–∑–µ–π", "–¢–µ–∞—Ç—Ä", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", "–ü–∞—Ä–∫–∏"] 
            if (culPlaces.indexOf(currtypeOfCulPlace) != -1) {
                // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥ —é–∑–µ—Ä–∞
                console.log(ctx.message.from.id)
                addUser(ctx.from.id, ctx.message.text);
                await ctx.reply('–û—Ç–ª–∏—á–Ω–æ, –∏–¥–µ–º –¥–∞–ª—å—à–µ', Markup.removeKeyboard());
                ctx.scene.enter('selectCity');
            }
            else {
                await ctx.reply("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª");
                ctx.scene.enter('typeOfCulPlace');
            }
        })

        typeOfCulPlace.on('message', (ctx) => {
            ctx.reply('–Ø –≤—Å–µ –µ—â–µ –∂–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∏–ø –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –º–µ—Å—Ç–∞')
        })

        return typeOfCulPlace
    }
    
    GenselectCityScene () {
        const selectCity = new Scenes.BaseScene('selectCity')
        selectCity.enter(async (ctx) => {
             // –∫–ª–∞–≤–∞
             const keyboard = Markup.keyboard([[
                Markup.button.text("–ú–æ—Å–∫–≤–∞"),
                Markup.button.text("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")], [
                Markup.button.text("–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"),
                Markup.button.text("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")], [
                Markup.button.text("–í–æ–ª–≥–æ–≥—Ä–∞–¥"),
                Markup.button.text("–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"),
                ]]).resize();

            await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ', keyboard)
        })
        selectCity.on('text', async (ctx) => {
            const currselectCity = ctx.message.text 
            if (currselectCity) {
                updateUserCity(ctx.from.id, ctx.message.text);
                await ctx.reply(`–í—ã–±—Ä–∞–Ω –ì–æ—Ä–æ–¥: ${currselectCity}`, Markup.removeKeyboard())
                ctx.scene.enter('keyword')
            }
            else {
                await ctx.reply("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –≤–∞—Å –ø–æ–Ω—è–ª")
                ctx.scene.enter('selectCity')
            }
        })

        selectCity.on('message', (ctx) => {
            ctx.reply('–Ø –≤—Å–µ –µ—â–µ –∂–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ—Ä–æ–¥')
        })
        return selectCity
    }
    
    
    GenkeywordScene () {
        const keyword = new Scenes.BaseScene('keyword')
        keyword.enter(async (ctx) => {
            await ctx.reply('–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ —Å–∞–º–æ–µ –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ç–µ–±–µ –ø–æ –¥—É—à–µ, –≤–≤–µ–¥–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ')
        })

        keyword.on('text', async (ctx) => {
            const currkeyword = ctx.message.text 
            if (currkeyword) {
                updateUserKeyword(ctx.from.id, ctx.message.text);
                await ctx.reply(`–í–∞—à–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ${currkeyword}`)
                await ctx.reply('–ê –≤–æ—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å')
                ctx.scene.enter('resultSel')
            }
            else {
                await ctx.reply("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
                ctx.scene.enter('keyword')
            }
        })

        keyword.on('message', (ctx) => {
            ctx.reply('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ')
        })
        return keyword
    }

    GenresultSelScene () {
        const resultSel = new Scenes.BaseScene('resultSel')
        resultSel.enter(async (ctx) => {
            // –∫–ª–∞–≤–∞
            const keyboard = Markup.keyboard([[
                Markup.button.text("‚ù§Ô∏è"),
                Markup.button.text("üßê"),
                Markup.button.text("üëé"),
                Markup.button.text("‚ùå")
            ]]).resize();
            
            // TODO –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç 
            getQuery(ctx.from.id)
            console.log(global.infoQuery[0])
            setTimeout(() => {
                let fil = {"data.general.name":{"$search":global.infoQuery[0].keyword},"data.general.locale.name":{"$search":global.infoQuery[0].city}}
                console.log(fil)
                if (global.infoQuery[0].typeOfPlace == "–ú—É–∑–µ–π") {
                    global.infoQuery[0].typeOfPlace = "museums";
                }
                else if (global.infoQuery[0].typeOfPlace == "–ü–∞—Ä–∫–∏") {
                    global.infoQuery[0].typeOfPlace = "parks";
                }
                else if (global.infoQuery[0].typeOfPlace == "–¢–µ–∞—Ç—Ä") {
                    global.infoQuery[0].typeOfPlace = "theaters";
                }
                else global.infoQuery[0].typeOfPlace = "libraries";

                cultureInfo(global.infoQuery[0].typeOfPlace, fil, global.infoQuery[0].number, 1);
            }, 500)
            await ctx.reply(`–ö–∞–∫ –≤–∞–º?`,keyboard)
            //     updateNumber(ctx.from.id);
            setTimeout(() => {
                if (global.infoCult.data.length != 0) {
                    ctx.reply(global.infoCult.data[0].data.general.name );
                    ctx.replyWithPhoto({url: global.infoCult.data[0].data.general.image.url});   
                } else {
                    ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–∏—Ö –º–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç —É –º–µ–Ω—è –≤ –±–∞–∑–µ, –ø–æ–∏—â–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ)")
                    
                } 
            }, 1000);
            
        })
           

        resultSel.on('text', async (ctx) => {
            
            const currresultSel = ctx.message.text
            console.log(currresultSel)
            if (currresultSel == '‚ù§Ô∏è') {
                await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ`, Markup.removeKeyboard())

                setTimeout(() => {
                    let fil = {"data.general.name":{"$search":global.infoQuery[0].keyword},"data.general.locale.name":{"$search":global.infoQuery[0].city}}
                    console.log(fil)
                   

                    cultureInfo(global.infoQuery[0].typeOfPlace, fil, global.infoQuery[0].number, 1);
                }, 500)
                
                //     updateNumber(ctx.from.id);
                setTimeout(() => {
                    addLike(ctx.from.id, global.infoCult.data[0].data.general.id, global.infoCult.data[0].data.general.name, global.infoCult.data[0].data.general.image.url);
                    
                    ctx.scene.reenter()
                
                }, 1000);
            }
            else if (currresultSel == 'üßê') {
                await ctx.reply(`–ü–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞`, Markup.removeKeyboard())
                
                ctx.scene.enter('detailsPlc')
            }
            else if (currresultSel == '‚ùå') {
                await ctx.reply(`–í—ã—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, Markup.removeKeyboard())
                ctx.scene.leave()
                zeroNumber(ctx.from.id)
            }
            else if (currresultSel == 'üëé') {
                await ctx.reply(`–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä–µ–º —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ –¥–ª—è –≤–∞—Å`, Markup.removeKeyboard())
                updateNumber(ctx.from.id);
                ctx.scene.reenter()
            }
            
            else {
                await ctx.reply("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
                ctx.scene.enter('resultSel')
            }
        })

        resultSel.on('message', (ctx) => {
            ctx.reply('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è –Ω–µ –ø–æ–Ω—è–ª')
        })
        return resultSel
    }

    GenDetails () {
        const detailsPlc = new Scenes.BaseScene('detailsPlc')
        detailsPlc.enter(async (ctx) => {

            const keyboard = Markup.keyboard([[
                Markup.button.text("‚ù§Ô∏è"),
                Markup.button.text("üëâ")
            ]]).resize();

            getQuery(ctx.from.id)
            console.log(global.infoQuery[0])
            setTimeout(() => {
                let fil = {"data.general.name":{"$search":global.infoQuery[0].keyword},"data.general.locale.name":{"$search":global.infoQuery[0].city}}
                console.log(fil)
                if (global.infoQuery[0].typeOfPlace == "–ú—É–∑–µ–π") {
                    global.infoQuery[0].typeOfPlace = "museums";
                }
                else if (global.infoQuery[0].typeOfPlace == "–ü–∞—Ä–∫–∏") {
                    global.infoQuery[0].typeOfPlace = "parks";
                }
                else if (global.infoQuery[0].typeOfPlace == "–¢–µ–∞—Ç—Ä") {
                    global.infoQuery[0].typeOfPlace = "theaters";
                }
                else global.infoQuery[0].typeOfPlace = "libraries";
               

                cultureInfo(global.infoQuery[0].typeOfPlace, fil, global.infoQuery[0].number, 1);
            }, 500)
            await ctx.reply('–î–µ—Ç–∞–ª–∏ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞: \n', keyboard)
            setTimeout(() => {
                if (global.infoCult.data.length != 0) {
                    ctx.reply(global.infoCult.data[0].data.general.name + "\n\n" + global.infoCult.data[0].data.general.description.replace('<p>', '').replace('</p>', '').replace('<span>', '').replace('</span>', ''));
                    ctx.replyWithLocation(global.infoCult.data[0].data.general.address.mapPosition.coordinates[0], global.infoCult.data[0].data.general.address.mapPosition.coordinates[1]);   
                    ctx.reply(global.infoCult.data[0].data.general.address.fullAddress + "\n" + global.infoCult.data[0].data.general.externalInfo[0].serviceName + "\n" + global.infoCult.data[0].data.general.externalInfo[0].url)

                } else {
                    ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–∏—Ö –º–µ—Å—Ç –Ω–µ—Ç —É –º–µ–Ω—è –±–∞–∑–µ, –ø–æ–∏—â–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ)")
                    ctx.scene.leave()
                } 
            }, 1000);
            
        })
        detailsPlc.on('text', async (ctx) => {
            const detailsPlc = ctx.message.text 
            if (detailsPlc == "‚ù§Ô∏è") {
                updateUserCity(ctx.from.id, ctx.message.text);
                await ctx.reply(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ`, Markup.removeKeyboard())
                ctx.scene.enter('resultSel')
            }
            else {
                await ctx.reply("–î–∞–ª–µ–µ")
                ctx.scene.enter('resultSel')
            }
        })
        detailsPlc.on('message', (ctx) => {
            ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –∑–∞–ø—Ä–æ—Å')
        })
        return detailsPlc
        }
}


module.exports = SceneGenerator

// https://opendata.mkrf.ru/v2/libraries/$?f={"data.general.name":{"$search":"–≠—Ä–º–∏—Ç–∞–∂"},"data.general.locale.name":{"$search":"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}}&s=0&l=1
// https://opendata.mkrf.ru/v2/museums/$?f={"data.general.name":{"$search":"–≠—Ä–º–∏—Ç–∞–∂"},"data.general.locale.name":{"$search":"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}}&s=0&l=1